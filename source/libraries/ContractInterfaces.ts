// THIS FILE IS AUTOMATICALLY GENERATED BY `generateContractInterfaces.ts`. DO NOT EDIT BY HAND'

    import BN = require('bn.js');
    import { encodeMethod, decodeParams } from 'ethjs-abi';
    import { AbiFunction } from 'ethereum';
    import { AccountManager } from './AccountManager';
    import { Connector } from './Connector';

    /**
     * By convention, pure/view methods have a `_` suffix on them indicating to the caller that the function will be executed locally and return the function's result.  payable/nonpayable functions have both a localy version and a remote version (distinguished by the trailing `_`).  If the remote method is called, you will only get back a transaction hash which can be used to lookup the transaction receipt for success/failure (due to EVM limitations you will not get the function results back).
     */

    export class Contract {
        protected readonly connector: Connector;
        protected readonly accountManager: AccountManager;
        public readonly address: string;
        protected readonly defaultGasPrice: BN;

        protected constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            this.connector = connector;
            this.accountManager = accountManager;
            this.address = address;
            this.defaultGasPrice = defaultGasPrice;
        }

        protected async localCall(abi: AbiFunction, parameters: Array<any>, sender?: string, attachedEth?: BN): Promise<Array<any>> {
            const from = sender || this.accountManager.defaultAddress;
            const data = encodeMethod(abi, parameters);
            const transaction = Object.assign({ from: from, to: this.address, data: data }, attachedEth ? { value: attachedEth } : {});
            const result = await this.connector.ethjsQuery.call(transaction);
            return decodeParams(abi.outputs.map(x => x.name), abi.outputs.map(x => x.type), result);
        }

        protected async remoteCall(abi: AbiFunction, parameters: Array<any>, sender?: string, gasPrice?: BN, attachedEth?: BN): Promise<string> {
            const from = sender || this.accountManager.defaultAddress;
            const data = encodeMethod(abi, parameters);
            // TODO: remove `gas` property once https://github.com/ethereumjs/testrpc/issues/411 is fixed
            const gas = await this.connector.ethjsQuery.estimateGas(Object.assign({ to: this.address, from: from, data: data, gas: new BN(6500000) }, attachedEth ? { value: attachedEth } : {} ));
            gasPrice = gasPrice || this.defaultGasPrice;
            const transaction = Object.assign({ from: from, to: this.address, data: data, gasPrice: gasPrice, gas: gas }, attachedEth ? { value: attachedEth } : {});
            const signedTransaction = await this.accountManager.signTransaction(transaction);
            return await this.connector.ethjsQuery.sendRawTransaction(signedTransaction);
        }
    }

    export class Controlled extends Contract {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }
}

export class Augur extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public logStakeTokenBurned = async(universe: string, target: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logStakeTokenBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, target, amount], options.sender, options.gasPrice);
    }

    public logStakeTokenBurned_ = async(universe: string, target: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logStakeTokenBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, target, amount], options.sender);
        return <boolean>result[0];
    }

    public logStakeTokensTransferred = async(universe: string, from: string, to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"logStakeTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, from, to, value], options.sender, options.gasPrice);
    }

    public logStakeTokensTransferred_ = async(universe: string, from: string, to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"logStakeTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, from, to, value], options.sender);
        return <boolean>result[0];
    }

    public logParticipationTokenBurned = async(universe: string, target: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logParticipationTokenBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, target, amount], options.sender, options.gasPrice);
    }

    public logParticipationTokenBurned_ = async(universe: string, target: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logParticipationTokenBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, target, amount], options.sender);
        return <boolean>result[0];
    }

    public logStakeTokenMinted = async(universe: string, target: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logStakeTokenMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, target, amount], options.sender, options.gasPrice);
    }

    public logStakeTokenMinted_ = async(universe: string, target: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logStakeTokenMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, target, amount], options.sender);
        return <boolean>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public logDesignatedReportSubmitted = async(universe: string, reporter: string, market: string, stakeToken: string, amountStaked: BN, payoutNumerators: Array<BN>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_stakeToken","type":"address"},{"name":"_amountStaked","type":"uint256"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"logDesignatedReportSubmitted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, reporter, market, stakeToken, amountStaked, payoutNumerators], options.sender, options.gasPrice);
    }

    public logDesignatedReportSubmitted_ = async(universe: string, reporter: string, market: string, stakeToken: string, amountStaked: BN, payoutNumerators: Array<BN>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_stakeToken","type":"address"},{"name":"_amountStaked","type":"uint256"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"logDesignatedReportSubmitted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, reporter, market, stakeToken, amountStaked, payoutNumerators], options.sender);
        return <boolean>result[0];
    }

    public logReputationTokenBurned = async(universe: string, target: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logReputationTokenBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, target, amount], options.sender, options.gasPrice);
    }

    public logReputationTokenBurned_ = async(universe: string, target: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logReputationTokenBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, target, amount], options.sender);
        return <boolean>result[0];
    }

    public logUniverseForked = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"logUniverseForked","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public logUniverseForked_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"logUniverseForked","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public logOrderFilled = async(universe: string, shareToken: string, filler: string, orderId: string, numCreatorShares: BN, numCreatorTokens: BN, numFillerShares: BN, numFillerTokens: BN, settlementFees: BN, tradeGroupId: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_shareToken","type":"address"},{"name":"_filler","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_numCreatorShares","type":"uint256"},{"name":"_numCreatorTokens","type":"uint256"},{"name":"_numFillerShares","type":"uint256"},{"name":"_numFillerTokens","type":"uint256"},{"name":"_settlementFees","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"logOrderFilled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, shareToken, filler, orderId, numCreatorShares, numCreatorTokens, numFillerShares, numFillerTokens, settlementFees, tradeGroupId], options.sender, options.gasPrice);
    }

    public logOrderFilled_ = async(universe: string, shareToken: string, filler: string, orderId: string, numCreatorShares: BN, numCreatorTokens: BN, numFillerShares: BN, numFillerTokens: BN, settlementFees: BN, tradeGroupId: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_shareToken","type":"address"},{"name":"_filler","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_numCreatorShares","type":"uint256"},{"name":"_numCreatorTokens","type":"uint256"},{"name":"_numFillerShares","type":"uint256"},{"name":"_numFillerTokens","type":"uint256"},{"name":"_settlementFees","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"logOrderFilled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, shareToken, filler, orderId, numCreatorShares, numCreatorTokens, numFillerShares, numFillerTokens, settlementFees, tradeGroupId], options.sender);
        return <boolean>result[0];
    }

    public logTradingProceedsClaimed = async(universe: string, shareToken: string, sender: string, market: string, numShares: BN, numPayoutTokens: BN, finalTokenBalance: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_shareToken","type":"address"},{"name":"_sender","type":"address"},{"name":"_market","type":"address"},{"name":"_numShares","type":"uint256"},{"name":"_numPayoutTokens","type":"uint256"},{"name":"_finalTokenBalance","type":"uint256"}],"name":"logTradingProceedsClaimed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, shareToken, sender, market, numShares, numPayoutTokens, finalTokenBalance], options.sender, options.gasPrice);
    }

    public logTradingProceedsClaimed_ = async(universe: string, shareToken: string, sender: string, market: string, numShares: BN, numPayoutTokens: BN, finalTokenBalance: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_shareToken","type":"address"},{"name":"_sender","type":"address"},{"name":"_market","type":"address"},{"name":"_numShares","type":"uint256"},{"name":"_numPayoutTokens","type":"uint256"},{"name":"_finalTokenBalance","type":"uint256"}],"name":"logTradingProceedsClaimed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, shareToken, sender, market, numShares, numPayoutTokens, finalTokenBalance], options.sender);
        return <boolean>result[0];
    }

    public logOrderCanceled = async(universe: string, shareToken: string, sender: string, orderId: string, orderType: BN, tokenRefund: BN, sharesRefund: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_shareToken","type":"address"},{"name":"_sender","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_orderType","type":"uint8"},{"name":"_tokenRefund","type":"uint256"},{"name":"_sharesRefund","type":"uint256"}],"name":"logOrderCanceled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, shareToken, sender, orderId, orderType, tokenRefund, sharesRefund], options.sender, options.gasPrice);
    }

    public logOrderCanceled_ = async(universe: string, shareToken: string, sender: string, orderId: string, orderType: BN, tokenRefund: BN, sharesRefund: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_shareToken","type":"address"},{"name":"_sender","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_orderType","type":"uint8"},{"name":"_tokenRefund","type":"uint256"},{"name":"_sharesRefund","type":"uint256"}],"name":"logOrderCanceled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, shareToken, sender, orderId, orderType, tokenRefund, sharesRefund], options.sender);
        return <boolean>result[0];
    }

    public logParticipationTokensTransferred = async(universe: string, from: string, to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"logParticipationTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, from, to, value], options.sender, options.gasPrice);
    }

    public logParticipationTokensTransferred_ = async(universe: string, from: string, to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"logParticipationTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, from, to, value], options.sender);
        return <boolean>result[0];
    }

    public logReputationTokenMinted = async(universe: string, target: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logReputationTokenMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, target, amount], options.sender, options.gasPrice);
    }

    public logReputationTokenMinted_ = async(universe: string, target: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logReputationTokenMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, target, amount], options.sender);
        return <boolean>result[0];
    }

    public logShareTokensTransferred = async(universe: string, from: string, to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"logShareTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, from, to, value], options.sender, options.gasPrice);
    }

    public logShareTokensTransferred_ = async(universe: string, from: string, to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"logShareTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, from, to, value], options.sender);
        return <boolean>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public logOrderCreated = async(universe: string, shareToken: string, creator: string, orderId: string, tradeGroupId: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_shareToken","type":"address"},{"name":"_creator","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_tradeGroupId","type":"uint256"}],"name":"logOrderCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, shareToken, creator, orderId, tradeGroupId], options.sender, options.gasPrice);
    }

    public logOrderCreated_ = async(universe: string, shareToken: string, creator: string, orderId: string, tradeGroupId: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_shareToken","type":"address"},{"name":"_creator","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_tradeGroupId","type":"uint256"}],"name":"logOrderCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, shareToken, creator, orderId, tradeGroupId], options.sender);
        return <boolean>result[0];
    }

    public logReportSubmitted = async(universe: string, reporter: string, market: string, stakeToken: string, amountStaked: BN, payoutNumerators: Array<BN>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_stakeToken","type":"address"},{"name":"_amountStaked","type":"uint256"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"logReportSubmitted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, reporter, market, stakeToken, amountStaked, payoutNumerators], options.sender, options.gasPrice);
    }

    public logReportSubmitted_ = async(universe: string, reporter: string, market: string, stakeToken: string, amountStaked: BN, payoutNumerators: Array<BN>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_stakeToken","type":"address"},{"name":"_amountStaked","type":"uint256"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"logReportSubmitted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, reporter, market, stakeToken, amountStaked, payoutNumerators], options.sender);
        return <boolean>result[0];
    }

    public logShareTokenBurned = async(universe: string, target: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logShareTokenBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, target, amount], options.sender, options.gasPrice);
    }

    public logShareTokenBurned_ = async(universe: string, target: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logShareTokenBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, target, amount], options.sender);
        return <boolean>result[0];
    }

    public logShareTokenMinted = async(universe: string, target: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logShareTokenMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, target, amount], options.sender, options.gasPrice);
    }

    public logShareTokenMinted_ = async(universe: string, target: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logShareTokenMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, target, amount], options.sender);
        return <boolean>result[0];
    }

    public logParticipationTokenMinted = async(universe: string, target: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logParticipationTokenMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, target, amount], options.sender, options.gasPrice);
    }

    public logParticipationTokenMinted_ = async(universe: string, target: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"logParticipationTokenMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, target, amount], options.sender);
        return <boolean>result[0];
    }

    public logReportsDisputed = async(universe: string, disputer: string, market: string, reportingPhase: BN, disputeBondAmount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_disputer","type":"address"},{"name":"_market","type":"address"},{"name":"_reportingPhase","type":"uint8"},{"name":"_disputeBondAmount","type":"uint256"}],"name":"logReportsDisputed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, disputer, market, reportingPhase, disputeBondAmount], options.sender, options.gasPrice);
    }

    public logReportsDisputed_ = async(universe: string, disputer: string, market: string, reportingPhase: BN, disputeBondAmount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_disputer","type":"address"},{"name":"_market","type":"address"},{"name":"_reportingPhase","type":"uint8"},{"name":"_disputeBondAmount","type":"uint256"}],"name":"logReportsDisputed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, disputer, market, reportingPhase, disputeBondAmount], options.sender);
        return <boolean>result[0];
    }

    public logMarketFinalized = async(universe: string, market: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"}],"name":"logMarketFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, market], options.sender, options.gasPrice);
    }

    public logMarketFinalized_ = async(universe: string, market: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"}],"name":"logMarketFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, market], options.sender);
        return <boolean>result[0];
    }

    public logMarketCreated = async(universe: string, market: string, marketCreator: string, marketCreationFee: BN, topic: string, extraInfo: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_marketCreator","type":"address"},{"name":"_marketCreationFee","type":"uint256"},{"name":"_topic","type":"string"},{"name":"_extraInfo","type":"string"}],"name":"logMarketCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, market, marketCreator, marketCreationFee, topic, extraInfo], options.sender, options.gasPrice);
    }

    public logMarketCreated_ = async(universe: string, market: string, marketCreator: string, marketCreationFee: BN, topic: string, extraInfo: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_marketCreator","type":"address"},{"name":"_marketCreationFee","type":"uint256"},{"name":"_topic","type":"string"},{"name":"_extraInfo","type":"string"}],"name":"logMarketCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, market, marketCreator, marketCreationFee, topic, extraInfo], options.sender);
        return <boolean>result[0];
    }

    public trustedTransfer = async(token: string, from: string, to: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_token","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"trustedTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [token, from, to, amount], options.sender, options.gasPrice);
    }

    public trustedTransfer_ = async(token: string, from: string, to: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_token","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"trustedTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [token, from, to, amount], options.sender);
        return <boolean>result[0];
    }

    public logReputationTokensTransferred = async(universe: string, from: string, to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"logReputationTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, from, to, value], options.sender, options.gasPrice);
    }

    public logReputationTokensTransferred_ = async(universe: string, from: string, to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"logReputationTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, from, to, value], options.sender);
        return <boolean>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public logWinningTokensRedeemed = async(universe: string, reporter: string, market: string, stakeToken: string, amountRedeemed: BN, reportingFeesReceived: BN, payoutNumerators: Array<BN>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_stakeToken","type":"address"},{"name":"_amountRedeemed","type":"uint256"},{"name":"_reportingFeesReceived","type":"uint256"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"logWinningTokensRedeemed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, reporter, market, stakeToken, amountRedeemed, reportingFeesReceived, payoutNumerators], options.sender, options.gasPrice);
    }

    public logWinningTokensRedeemed_ = async(universe: string, reporter: string, market: string, stakeToken: string, amountRedeemed: BN, reportingFeesReceived: BN, payoutNumerators: Array<BN>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_stakeToken","type":"address"},{"name":"_amountRedeemed","type":"uint256"},{"name":"_reportingFeesReceived","type":"uint256"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"logWinningTokensRedeemed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, reporter, market, stakeToken, amountRedeemed, reportingFeesReceived, payoutNumerators], options.sender);
        return <boolean>result[0];
    }

    public logUniverseCreated = async(childUniverse: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_childUniverse","type":"address"}],"name":"logUniverseCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [childUniverse], options.sender, options.gasPrice);
    }

    public logUniverseCreated_ = async(childUniverse: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_childUniverse","type":"address"}],"name":"logUniverseCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [childUniverse], options.sender);
        return <boolean>result[0];
    }
}

export class Controller extends Contract {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public switchModeSoOnlyEmergencyStopsAndEscapeHatchesCanBeUsed = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"switchModeSoOnlyEmergencyStopsAndEscapeHatchesCanBeUsed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public switchModeSoOnlyEmergencyStopsAndEscapeHatchesCanBeUsed_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"switchModeSoOnlyEmergencyStopsAndEscapeHatchesCanBeUsed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public unregisterContract = async(key: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_key","type":"bytes32"}],"name":"unregisterContract","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [key], options.sender, options.gasPrice);
    }

    public unregisterContract_ = async(key: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_key","type":"bytes32"}],"name":"unregisterContract","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [key], options.sender);
        return <boolean>result[0];
    }

    public extractEther = async(target: string, destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(target: string, destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, destination], options.sender);
        return <boolean>result[0];
    }

    public getContractDetails_ = async(key: string, options?: { sender?: string }): Promise<Array<string>> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_key","type":"bytes32"}],"name":"getContractDetails","outputs":[{"name":"","type":"address"},{"name":"","type":"bytes20"},{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [key], options.sender);
        return <Array<string>>result;
    }

    public stopInEmergency_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"stopInEmergency","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public registerContract = async(key: string, address: string, commitHash: string, bytecodeHash: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_key","type":"bytes32"},{"name":"_address","type":"address"},{"name":"_commitHash","type":"bytes20"},{"name":"_bytecodeHash","type":"bytes32"}],"name":"registerContract","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [key, address, commitHash, bytecodeHash], options.sender, options.gasPrice);
    }

    public registerContract_ = async(key: string, address: string, commitHash: string, bytecodeHash: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_key","type":"bytes32"},{"name":"_address","type":"address"},{"name":"_commitHash","type":"bytes20"},{"name":"_bytecodeHash","type":"bytes32"}],"name":"registerContract","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [key, address, commitHash, bytecodeHash], options.sender);
        return <boolean>result[0];
    }

    public onlyInEmergency_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"onlyInEmergency","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public assertIsWhitelisted_ = async(target: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_target","type":"address"}],"name":"assertIsWhitelisted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [target], options.sender);
        return <boolean>result[0];
    }

    public getAugur_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getAugur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public extractTokens = async(target: string, destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(target: string, destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, destination, token], options.sender);
        return <boolean>result[0];
    }

    public updateController = async(target: string, newController: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_newController","type":"address"}],"name":"updateController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, newController], options.sender, options.gasPrice);
    }

    public updateController_ = async(target: string, newController: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_newController","type":"address"}],"name":"updateController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, newController], options.sender);
        return <boolean>result[0];
    }

    public emergencyStop = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"emergencyStop","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public emergencyStop_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"emergencyStop","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public stopped_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"stopped","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public registry_ = async(arg0: string, options?: { sender?: string }): Promise<Array<string>> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"registry","outputs":[{"name":"name","type":"bytes32"},{"name":"contractAddress","type":"address"},{"name":"commitHash","type":"bytes20"},{"name":"bytecodeHash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [arg0], options.sender);
        return <Array<string>>result;
    }

    public release = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"release","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public release_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"release","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public removeFromWhitelist = async(target: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"}],"name":"removeFromWhitelist","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target], options.sender, options.gasPrice);
    }

    public removeFromWhitelist_ = async(target: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"}],"name":"removeFromWhitelist","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target], options.sender);
        return <boolean>result[0];
    }

    public owner_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public suicideFunds = async(target: string, destination: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_destination","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, destination, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, destination: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_destination","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, destination, tokens], options.sender);
        return <boolean>result[0];
    }

    public whitelist_ = async(arg0: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"}],"name":"whitelist","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [arg0], options.sender);
        return <boolean>result[0];
    }

    public addToWhitelist = async(target: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"}],"name":"addToWhitelist","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target], options.sender, options.gasPrice);
    }

    public addToWhitelist_ = async(target: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"}],"name":"addToWhitelist","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target], options.sender);
        return <boolean>result[0];
    }

    public transferOwnership = async(newOwner: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [newOwner], options.sender, options.gasPrice);
    }

    public transferOwnership_ = async(newOwner: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [newOwner], options.sender);
        return <boolean>result[0];
    }

    public lookup_ = async(key: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_key","type":"bytes32"}],"name":"lookup","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [key], options.sender);
        return <string>result[0];
    }

    public assertOnlySpecifiedCaller_ = async(caller: string, allowedCaller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_caller","type":"address"},{"name":"_allowedCaller","type":"bytes32"}],"name":"assertOnlySpecifiedCaller","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [caller, allowedCaller], options.sender);
        return <boolean>result[0];
    }
}

export class LegacyReputationToken extends Contract {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public name_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public approve = async(spender: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [spender, value], options.sender, options.gasPrice);
    }

    public approve_ = async(spender: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [spender, value], options.sender);
        return <boolean>result[0];
    }

    public totalSupply_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public transferFrom = async(from: string, to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [from, to, value], options.sender, options.gasPrice);
    }

    public transferFrom_ = async(from: string, to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [from, to, value], options.sender);
        return <boolean>result[0];
    }

    public decimals_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public faucet = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [amount], options.sender, options.gasPrice);
    }

    public faucet_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [amount], options.sender);
        return <boolean>result[0];
    }

    public ETERNAL_APPROVAL_VALUE_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ETERNAL_APPROVAL_VALUE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public balanceOf_ = async(owner: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [owner], options.sender);
        return <BN>result[0];
    }

    public symbol_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public transfer = async(to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [to, value], options.sender, options.gasPrice);
    }

    public transfer_ = async(to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [to, value], options.sender);
        return <boolean>result[0];
    }

    public allowance_ = async(owner: string, spender: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [owner, spender], options.sender);
        return <BN>result[0];
    }

    public getBalance_ = async(address: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_address","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [address], options.sender);
        return <BN>result[0];
    }
}

export class DisputeBondFactory extends Contract {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public createDisputeBond = async(controller: string, market: string, bondHolder: string, bondAmount: BN, payoutDistributionHash: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_market","type":"address"},{"name":"_bondHolder","type":"address"},{"name":"_bondAmount","type":"uint256"},{"name":"_payoutDistributionHash","type":"bytes32"}],"name":"createDisputeBond","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller, market, bondHolder, bondAmount, payoutDistributionHash], options.sender, options.gasPrice);
    }

    public createDisputeBond_ = async(controller: string, market: string, bondHolder: string, bondAmount: BN, payoutDistributionHash: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_market","type":"address"},{"name":"_bondHolder","type":"address"},{"name":"_bondAmount","type":"uint256"},{"name":"_payoutDistributionHash","type":"bytes32"}],"name":"createDisputeBond","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller, market, bondHolder, bondAmount, payoutDistributionHash], options.sender);
        return <string>result[0];
    }
}

export class MailboxFactory extends Contract {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public createMailbox = async(controller: string, owner: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_owner","type":"address"}],"name":"createMailbox","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller, owner], options.sender, options.gasPrice);
    }

    public createMailbox_ = async(controller: string, owner: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_owner","type":"address"}],"name":"createMailbox","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller, owner], options.sender);
        return <string>result[0];
    }
}

export class MapFactory extends Contract {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public createMap = async(controller: string, owner: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_owner","type":"address"}],"name":"createMap","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller, owner], options.sender, options.gasPrice);
    }

    public createMap_ = async(controller: string, owner: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_owner","type":"address"}],"name":"createMap","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller, owner], options.sender);
        return <string>result[0];
    }
}

export class MarketFactory extends Contract {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public createMarket = async(controller: string, reportingWindow: string, endTime: BN, numOutcomes: BN, numTicks: BN, feePerEthInWei: BN, denominationToken: string, creator: string, designatedReporterAddress: string, options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_reportingWindow","type":"address"},{"name":"_endTime","type":"uint256"},{"name":"_numOutcomes","type":"uint8"},{"name":"_numTicks","type":"uint256"},{"name":"_feePerEthInWei","type":"uint256"},{"name":"_denominationToken","type":"address"},{"name":"_creator","type":"address"},{"name":"_designatedReporterAddress","type":"address"}],"name":"createMarket","outputs":[{"name":"_market","type":"address"}],"payable":true,"stateMutability":"payable","type":"function"};
        return await this.remoteCall(abi, [controller, reportingWindow, endTime, numOutcomes, numTicks, feePerEthInWei, denominationToken, creator, designatedReporterAddress], options.sender, options.gasPrice, options.attachedEth);
    }

    public createMarket_ = async(controller: string, reportingWindow: string, endTime: BN, numOutcomes: BN, numTicks: BN, feePerEthInWei: BN, denominationToken: string, creator: string, designatedReporterAddress: string, options?: { sender?: string, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_reportingWindow","type":"address"},{"name":"_endTime","type":"uint256"},{"name":"_numOutcomes","type":"uint8"},{"name":"_numTicks","type":"uint256"},{"name":"_feePerEthInWei","type":"uint256"},{"name":"_denominationToken","type":"address"},{"name":"_creator","type":"address"},{"name":"_designatedReporterAddress","type":"address"}],"name":"createMarket","outputs":[{"name":"_market","type":"address"}],"payable":true,"stateMutability":"payable","type":"function"};
        const result = await this.localCall(abi, [controller, reportingWindow, endTime, numOutcomes, numTicks, feePerEthInWei, denominationToken, creator, designatedReporterAddress], options.sender, options.attachedEth);
        return <string>result[0];
    }
}

export class ParticipationTokenFactory extends Contract {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public createParticipationToken = async(controller: string, reportingWindow: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_reportingWindow","type":"address"}],"name":"createParticipationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller, reportingWindow], options.sender, options.gasPrice);
    }

    public createParticipationToken_ = async(controller: string, reportingWindow: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_reportingWindow","type":"address"}],"name":"createParticipationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller, reportingWindow], options.sender);
        return <string>result[0];
    }
}

export class ReportingWindowFactory extends Contract {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public createReportingWindow = async(controller: string, universe: string, reportingWindowId: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_universe","type":"address"},{"name":"_reportingWindowId","type":"uint256"}],"name":"createReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller, universe, reportingWindowId], options.sender, options.gasPrice);
    }

    public createReportingWindow_ = async(controller: string, universe: string, reportingWindowId: BN, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_universe","type":"address"},{"name":"_reportingWindowId","type":"uint256"}],"name":"createReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller, universe, reportingWindowId], options.sender);
        return <string>result[0];
    }
}

export class ReputationTokenFactory extends Contract {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public createReputationToken = async(controller: string, universe: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_universe","type":"address"}],"name":"createReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller, universe], options.sender, options.gasPrice);
    }

    public createReputationToken_ = async(controller: string, universe: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_universe","type":"address"}],"name":"createReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller, universe], options.sender);
        return <string>result[0];
    }
}

export class ShareTokenFactory extends Contract {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public createShareToken = async(controller: string, market: string, outcome: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"}],"name":"createShareToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller, market, outcome], options.sender, options.gasPrice);
    }

    public createShareToken_ = async(controller: string, market: string, outcome: BN, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"}],"name":"createShareToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller, market, outcome], options.sender);
        return <string>result[0];
    }
}

export class StakeTokenFactory extends Contract {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public createStakeToken = async(controller: string, market: string, payoutNumerators: Array<BN>, invalid: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_market","type":"address"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_invalid","type":"bool"}],"name":"createStakeToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller, market, payoutNumerators, invalid], options.sender, options.gasPrice);
    }

    public createStakeToken_ = async(controller: string, market: string, payoutNumerators: Array<BN>, invalid: boolean, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_market","type":"address"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_invalid","type":"bool"}],"name":"createStakeToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller, market, payoutNumerators, invalid], options.sender);
        return <string>result[0];
    }
}

export class UniverseFactory extends Contract {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public createUniverse = async(controller: string, parentUniverse: string, parentPayoutDistributionHash: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_parentUniverse","type":"address"},{"name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"createUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller, parentUniverse, parentPayoutDistributionHash], options.sender, options.gasPrice);
    }

    public createUniverse_ = async(controller: string, parentUniverse: string, parentPayoutDistributionHash: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"},{"name":"_parentUniverse","type":"address"},{"name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"createUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller, parentUniverse, parentPayoutDistributionHash], options.sender);
        return <string>result[0];
    }
}

export class Delegator extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }
}

export class DisputeBond extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public getDisputedPayoutDistributionHash_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDisputedPayoutDistributionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public getUniverse_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getOwner_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public withdraw = async(orgoFees: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"forgoFees","type":"bool"}],"name":"withdraw","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [orgoFees], options.sender, options.gasPrice);
    }

    public withdraw_ = async(orgoFees: boolean, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"forgoFees","type":"bool"}],"name":"withdraw","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [orgoFees], options.sender);
        return <boolean>result[0];
    }

    public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public withdrawInEmergency = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawInEmergency","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public withdrawInEmergency_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawInEmergency","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public initialize = async(market: string, bondHolder: string, bondAmount: BN, payoutDistributionHash: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_bondHolder","type":"address"},{"name":"_bondAmount","type":"uint256"},{"name":"_payoutDistributionHash","type":"bytes32"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [market, bondHolder, bondAmount, payoutDistributionHash], options.sender, options.gasPrice);
    }

    public initialize_ = async(market: string, bondHolder: string, bondAmount: BN, payoutDistributionHash: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_bondHolder","type":"address"},{"name":"_bondAmount","type":"uint256"},{"name":"_payoutDistributionHash","type":"bytes32"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [market, bondHolder, bondAmount, payoutDistributionHash], options.sender);
        return <boolean>result[0];
    }

    public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getBondRemainingToBePaidOut_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getBondRemainingToBePaidOut","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public getInitialized_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getMarket_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarket","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public transferOwnership = async(newOwner: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [newOwner], options.sender, options.gasPrice);
    }

    public transferOwnership_ = async(newOwner: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [newOwner], options.sender);
        return <boolean>result[0];
    }

    public withdrawDisavowedTokens = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawDisavowedTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public withdrawDisavowedTokens_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawDisavowedTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public withdrawToUniverse = async(shadyUniverse: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_shadyUniverse","type":"address"}],"name":"withdrawToUniverse","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [shadyUniverse], options.sender, options.gasPrice);
    }

    public withdrawToUniverse_ = async(shadyUniverse: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_shadyUniverse","type":"address"}],"name":"withdrawToUniverse","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [shadyUniverse], options.sender);
        return <boolean>result[0];
    }
}

export class Market extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public migrateThroughAllForks = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateThroughAllForks","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public migrateThroughAllForks_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateThroughAllForks","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public migrateThroughOneFork = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateThroughOneFork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public migrateThroughOneFork_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateThroughOneFork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public getOrCreateStakeToken = async(payoutNumerators: Array<BN>, invalid: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_invalid","type":"bool"}],"name":"getOrCreateStakeToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [payoutNumerators, invalid], options.sender, options.gasPrice);
    }

    public getOrCreateStakeToken_ = async(payoutNumerators: Array<BN>, invalid: boolean, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_invalid","type":"bool"}],"name":"getOrCreateStakeToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [payoutNumerators, invalid], options.sender);
        return <string>result[0];
    }

    public updateTentativeWinningPayoutDistributionHash = async(payoutDistributionHash: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutDistributionHash","type":"bytes32"}],"name":"updateTentativeWinningPayoutDistributionHash","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [payoutDistributionHash], options.sender, options.gasPrice);
    }

    public updateTentativeWinningPayoutDistributionHash_ = async(payoutDistributionHash: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutDistributionHash","type":"bytes32"}],"name":"updateTentativeWinningPayoutDistributionHash","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [payoutDistributionHash], options.sender);
        return <boolean>result[0];
    }

    public getMarketCreatorSettlementFeeDivisor_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarketCreatorSettlementFeeDivisor","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getExtraDisputeBondRemainingToBePaidOut_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getExtraDisputeBondRemainingToBePaidOut","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public initialize = async(reportingWindow: string, endTime: BN, numOutcomes: BN, numTicks: BN, feePerEthInAttoeth: BN, cash: string, creator: string, designatedReporterAddress: string, options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reportingWindow","type":"address"},{"name":"_endTime","type":"uint256"},{"name":"_numOutcomes","type":"uint8"},{"name":"_numTicks","type":"uint256"},{"name":"_feePerEthInAttoeth","type":"uint256"},{"name":"_cash","type":"address"},{"name":"_creator","type":"address"},{"name":"_designatedReporterAddress","type":"address"}],"name":"initialize","outputs":[{"name":"_success","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"};
        return await this.remoteCall(abi, [reportingWindow, endTime, numOutcomes, numTicks, feePerEthInAttoeth, cash, creator, designatedReporterAddress], options.sender, options.gasPrice, options.attachedEth);
    }

    public initialize_ = async(reportingWindow: string, endTime: BN, numOutcomes: BN, numTicks: BN, feePerEthInAttoeth: BN, cash: string, creator: string, designatedReporterAddress: string, options?: { sender?: string, attachedEth?: BN }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reportingWindow","type":"address"},{"name":"_endTime","type":"uint256"},{"name":"_numOutcomes","type":"uint8"},{"name":"_numTicks","type":"uint256"},{"name":"_feePerEthInAttoeth","type":"uint256"},{"name":"_cash","type":"address"},{"name":"_creator","type":"address"},{"name":"_designatedReporterAddress","type":"address"}],"name":"initialize","outputs":[{"name":"_success","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"};
        const result = await this.localCall(abi, [reportingWindow, endTime, numOutcomes, numTicks, feePerEthInAttoeth, cash, creator, designatedReporterAddress], options.sender, options.attachedEth);
        return <boolean>result[0];
    }

    public derivePayoutDistributionHash_ = async(payoutNumerators: Array<BN>, invalid: boolean, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_invalid","type":"bool"}],"name":"derivePayoutDistributionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [payoutNumerators, invalid], options.sender);
        return <string>result[0];
    }

    public getDesignatedReportDisputeDueTimestamp_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDesignatedReportDisputeDueTimestamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getNumberOfOutcomes_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumberOfOutcomes","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getShareToken_ = async(outcome: BN, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_outcome","type":"uint8"}],"name":"getShareToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [outcome], options.sender);
        return <string>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public tryFinalize = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"tryFinalize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public tryFinalize_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"tryFinalize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getTentativeWinningPayoutDistributionHash_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTentativeWinningPayoutDistributionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public isContainerForDisputeBond_ = async(shadyDisputeBond: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyDisputeBond","type":"address"}],"name":"isContainerForDisputeBond","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyDisputeBond], options.sender);
        return <boolean>result[0];
    }

    public disavowTokens = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"disavowTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public disavowTokens_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"disavowTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getTotalWinningDisputeBondStake_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalWinningDisputeBondStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getEndTime_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public designatedReport = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"designatedReport","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public designatedReport_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"designatedReport","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getPayoutDistributionHashStake_ = async(payoutDistributionHash: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_payoutDistributionHash","type":"bytes32"}],"name":"getPayoutDistributionHashStake","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [payoutDistributionHash], options.sender);
        return <BN>result[0];
    }

    public disputeDesignatedReport = async(payoutNumerators: Array<BN>, attotokens: BN, invalid: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_attotokens","type":"uint256"},{"name":"_invalid","type":"bool"}],"name":"disputeDesignatedReport","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [payoutNumerators, attotokens, invalid], options.sender, options.gasPrice);
    }

    public disputeDesignatedReport_ = async(payoutNumerators: Array<BN>, attotokens: BN, invalid: boolean, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_attotokens","type":"uint256"},{"name":"_invalid","type":"bool"}],"name":"disputeDesignatedReport","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [payoutNumerators, attotokens, invalid], options.sender);
        return <boolean>result[0];
    }

    public firstReporterCompensationCheck = async(reporter: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"}],"name":"firstReporterCompensationCheck","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [reporter], options.sender, options.gasPrice);
    }

    public firstReporterCompensationCheck_ = async(reporter: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"}],"name":"firstReporterCompensationCheck","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [reporter], options.sender);
        return <BN>result[0];
    }

    public isContainerForShareToken_ = async(shadyShareToken: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyShareToken","type":"address"}],"name":"isContainerForShareToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyShareToken], options.sender);
        return <boolean>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public getDesignatedReporter_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDesignatedReporter","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public increaseTotalStake = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"increaseTotalStake","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [amount], options.sender, options.gasPrice);
    }

    public increaseTotalStake_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"increaseTotalStake","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [amount], options.sender);
        return <boolean>result[0];
    }

    public getTotalStake_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getUniverse_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getFinalWinningStakeToken_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getFinalWinningStakeToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getOwner_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getFinalPayoutDistributionHash_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getFinalPayoutDistributionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getDesignatedReportReceivedTime_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDesignatedReportReceivedTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public getFirstReportersDisputeBond_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getFirstReportersDisputeBond","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getFinalizationTime_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getFinalizationTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public isContainerForStakeToken_ = async(shadyStakeToken: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyStakeToken","type":"address"}],"name":"isContainerForStakeToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyStakeToken], options.sender);
        return <boolean>result[0];
    }

    public disputeLastReporters = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"disputeLastReporters","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public disputeLastReporters_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"disputeLastReporters","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getDesignatedReporterDisputeBond_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDesignatedReporterDisputeBond","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getBestGuessSecondPlaceTentativeWinningPayoutDistributionHash_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getBestGuessSecondPlaceTentativeWinningPayoutDistributionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getNumTicks_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumTicks","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public isValid_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isValid","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public withdrawInEmergency = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawInEmergency","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public withdrawInEmergency_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawInEmergency","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getStakeTokenOrZeroByPayoutDistributionHash_ = async(payoutDistributionHash: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_payoutDistributionHash","type":"bytes32"}],"name":"getStakeTokenOrZeroByPayoutDistributionHash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [payoutDistributionHash], options.sender);
        return <string>result[0];
    }

    public getReportingState_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReportingState","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getLastReportersDisputeBond_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getLastReportersDisputeBond","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getForkingMarket_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getForkingMarket","outputs":[{"name":"_market","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public migrateDueToNoReports = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateDueToNoReports","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public migrateDueToNoReports_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateDueToNoReports","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getDenominationToken_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDenominationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public decreaseExtraDisputeBondRemainingToBePaidOut = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"decreaseExtraDisputeBondRemainingToBePaidOut","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [amount], options.sender, options.gasPrice);
    }

    public decreaseExtraDisputeBondRemainingToBePaidOut_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"decreaseExtraDisputeBondRemainingToBePaidOut","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [amount], options.sender);
        return <boolean>result[0];
    }

    public getDesignatedReportPayoutHash_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDesignatedReportPayoutHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getMarketCreatorMailbox_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarketCreatorMailbox","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public disputeFirstReporters = async(payoutNumerators: Array<BN>, attotokens: BN, invalid: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_attotokens","type":"uint256"},{"name":"_invalid","type":"bool"}],"name":"disputeFirstReporters","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [payoutNumerators, attotokens, invalid], options.sender, options.gasPrice);
    }

    public disputeFirstReporters_ = async(payoutNumerators: Array<BN>, attotokens: BN, invalid: boolean, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_attotokens","type":"uint256"},{"name":"_invalid","type":"bool"}],"name":"disputeFirstReporters","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [payoutNumerators, attotokens, invalid], options.sender);
        return <boolean>result[0];
    }

    public getDesignatedReportDueTimestamp_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDesignatedReportDueTimestamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getInitialized_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getReportingWindow_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public transferOwnership = async(newOwner: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [newOwner], options.sender, options.gasPrice);
    }

    public transferOwnership_ = async(newOwner: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [newOwner], options.sender);
        return <boolean>result[0];
    }
}

export class ParticipationToken extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public approve = async(spender: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [spender, value], options.sender, options.gasPrice);
    }

    public approve_ = async(spender: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [spender, value], options.sender);
        return <boolean>result[0];
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public totalSupply_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public transferFrom = async(from: string, to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [from, to, value], options.sender, options.gasPrice);
    }

    public transferFrom_ = async(from: string, to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [from, to, value], options.sender);
        return <boolean>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public ETERNAL_APPROVAL_VALUE_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ETERNAL_APPROVAL_VALUE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public balanceOf_ = async(owner: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [owner], options.sender);
        return <BN>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public transfer = async(to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [to, value], options.sender, options.gasPrice);
    }

    public transfer_ = async(to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [to, value], options.sender);
        return <boolean>result[0];
    }

    public redeem = async(orgoFees: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"forgoFees","type":"bool"}],"name":"redeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [orgoFees], options.sender, options.gasPrice);
    }

    public redeem_ = async(orgoFees: boolean, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"forgoFees","type":"bool"}],"name":"redeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [orgoFees], options.sender);
        return <boolean>result[0];
    }

    public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public withdrawInEmergency = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawInEmergency","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public withdrawInEmergency_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawInEmergency","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public initialize = async(reportingWindow: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reportingWindow","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [reportingWindow], options.sender, options.gasPrice);
    }

    public initialize_ = async(reportingWindow: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reportingWindow","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [reportingWindow], options.sender);
        return <boolean>result[0];
    }

    public buy = async(attotokens: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_attotokens","type":"uint256"}],"name":"buy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [attotokens], options.sender, options.gasPrice);
    }

    public buy_ = async(attotokens: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_attotokens","type":"uint256"}],"name":"buy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [attotokens], options.sender);
        return <boolean>result[0];
    }

    public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public allowance_ = async(owner: string, spender: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [owner, spender], options.sender);
        return <BN>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public getInitialized_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getReportingWindow_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getBalance_ = async(address: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_address","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [address], options.sender);
        return <BN>result[0];
    }
}

export class RepPriceOracle extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public getRepPriceInAttoEth_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getRepPriceInAttoEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public getOwner_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public setRepPriceInAttoEth = async(repPriceInAttoEth: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_repPriceInAttoEth","type":"uint256"}],"name":"setRepPriceInAttoEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [repPriceInAttoEth], options.sender, options.gasPrice);
    }

    public setRepPriceInAttoEth_ = async(repPriceInAttoEth: BN, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_repPriceInAttoEth","type":"uint256"}],"name":"setRepPriceInAttoEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [repPriceInAttoEth], options.sender);
        return <BN>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public transferOwnership = async(newOwner: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [newOwner], options.sender, options.gasPrice);
    }

    public transferOwnership_ = async(newOwner: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [newOwner], options.sender);
        return <boolean>result[0];
    }
}

export class ReportingWindow extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public getOrCreatePreviousReportingWindow = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCreatePreviousReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public getOrCreatePreviousReportingWindow_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCreatePreviousReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public removeMarket = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"removeMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public removeMarket_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"removeMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public updateMarketPhase = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateMarketPhase","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public updateMarketPhase_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateMarketPhase","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public isReportingActive_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isReportingActive","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public isActive_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isActive","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getMarketsCount_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarketsCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getNumMarkets_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumMarkets","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getAvgReportingGasPrice_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getAvgReportingGasPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public migrateFeesDueToFork = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFeesDueToFork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public migrateFeesDueToFork_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFeesDueToFork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public isContainerForDisputeBond_ = async(shadyDisputeBond: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyDisputeBond","type":"address"}],"name":"isContainerForDisputeBond","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyDisputeBond], options.sender);
        return <boolean>result[0];
    }

    public getDisputeStartTime_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDisputeStartTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getParticipationToken_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getParticipationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public collectStakeTokenReportingFees = async(reporterAddress: string, attoStake: BN, forgoFees: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporterAddress","type":"address"},{"name":"_attoStake","type":"uint256"},{"name":"_forgoFees","type":"bool"}],"name":"collectStakeTokenReportingFees","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [reporterAddress, attoStake, forgoFees], options.sender, options.gasPrice);
    }

    public collectStakeTokenReportingFees_ = async(reporterAddress: string, attoStake: BN, forgoFees: boolean, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporterAddress","type":"address"},{"name":"_attoStake","type":"uint256"},{"name":"_forgoFees","type":"bool"}],"name":"collectStakeTokenReportingFees","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [reporterAddress, attoStake, forgoFees], options.sender);
        return <BN>result[0];
    }

    public getEndTime_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public collectParticipationTokenReportingFees = async(reporterAddress: string, attoStake: BN, forgoFees: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporterAddress","type":"address"},{"name":"_attoStake","type":"uint256"},{"name":"_forgoFees","type":"bool"}],"name":"collectParticipationTokenReportingFees","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [reporterAddress, attoStake, forgoFees], options.sender, options.gasPrice);
    }

    public collectParticipationTokenReportingFees_ = async(reporterAddress: string, attoStake: BN, forgoFees: boolean, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporterAddress","type":"address"},{"name":"_attoStake","type":"uint256"},{"name":"_forgoFees","type":"bool"}],"name":"collectParticipationTokenReportingFees","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [reporterAddress, attoStake, forgoFees], options.sender);
        return <BN>result[0];
    }

    public triggerMigrateFeesDueToFork = async(reportingWindow: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reportingWindow","type":"address"}],"name":"triggerMigrateFeesDueToFork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [reportingWindow], options.sender, options.gasPrice);
    }

    public triggerMigrateFeesDueToFork_ = async(reportingWindow: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reportingWindow","type":"address"}],"name":"triggerMigrateFeesDueToFork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [reportingWindow], options.sender);
        return <boolean>result[0];
    }

    public getDisputeEndTime_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDisputeEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getTotalWinningStake_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalWinningStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public increaseTotalStake = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"increaseTotalStake","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [amount], options.sender, options.gasPrice);
    }

    public increaseTotalStake_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"increaseTotalStake","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [amount], options.sender);
        return <boolean>result[0];
    }

    public getTotalStake_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getLastReporterMarketsCount_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getLastReporterMarketsCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getFirstReporterMarketsCount_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getFirstReporterMarketsCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getUniverse_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getOrCreateNextReportingWindow = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCreateNextReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public getOrCreateNextReportingWindow_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCreateNextReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public migrateFeesDueToMarketMigration = async(market: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"}],"name":"migrateFeesDueToMarketMigration","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [market], options.sender, options.gasPrice);
    }

    public migrateFeesDueToMarketMigration_ = async(market: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"}],"name":"migrateFeesDueToMarketMigration","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [market], options.sender);
        return <boolean>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public noteReportingGasPrice = async(market: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"}],"name":"noteReportingGasPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [market], options.sender, options.gasPrice);
    }

    public noteReportingGasPrice_ = async(market: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"}],"name":"noteReportingGasPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [market], options.sender);
        return <boolean>result[0];
    }

    public getReportingEndTime_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReportingEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public isContainerForParticipationToken_ = async(shadyParticipationToken: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyParticipationToken","type":"address"}],"name":"isContainerForParticipationToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyParticipationToken], options.sender);
        return <boolean>result[0];
    }

    public isContainerForMarket_ = async(shadyMarket: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyMarket","type":"address"}],"name":"isContainerForMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyMarket], options.sender);
        return <boolean>result[0];
    }

    public isContainerForStakeToken_ = async(shadyStakeToken: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyStakeToken","type":"address"}],"name":"isContainerForStakeToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyStakeToken], options.sender);
        return <boolean>result[0];
    }

    public getNumIncorrectDesignatedReportMarkets_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumIncorrectDesignatedReportMarkets","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public noteDesignatedReport = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"noteDesignatedReport","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public noteDesignatedReport_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"noteDesignatedReport","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public increaseTotalWinningStake = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"increaseTotalWinningStake","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [amount], options.sender, options.gasPrice);
    }

    public increaseTotalWinningStake_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"increaseTotalWinningStake","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [amount], options.sender);
        return <boolean>result[0];
    }

    public allMarketsFinalized_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"allMarketsFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public isOver_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isOver","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getReportingStartTime_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReportingStartTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getReputationToken_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public collectDisputeBondReportingFees = async(reporterAddress: string, attoStake: BN, forgoFees: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporterAddress","type":"address"},{"name":"_attoStake","type":"uint256"},{"name":"_forgoFees","type":"bool"}],"name":"collectDisputeBondReportingFees","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [reporterAddress, attoStake, forgoFees], options.sender, options.gasPrice);
    }

    public collectDisputeBondReportingFees_ = async(reporterAddress: string, attoStake: BN, forgoFees: boolean, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporterAddress","type":"address"},{"name":"_attoStake","type":"uint256"},{"name":"_forgoFees","type":"bool"}],"name":"collectDisputeBondReportingFees","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [reporterAddress, attoStake, forgoFees], options.sender);
        return <BN>result[0];
    }

    public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getStartTime_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getStartTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public initialize = async(universe: string, reportingWindowId: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reportingWindowId","type":"uint256"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe, reportingWindowId], options.sender, options.gasPrice);
    }

    public initialize_ = async(universe: string, reportingWindowId: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reportingWindowId","type":"uint256"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe, reportingWindowId], options.sender);
        return <boolean>result[0];
    }

    public migrateMarketInFromSibling = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateMarketInFromSibling","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public migrateMarketInFromSibling_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateMarketInFromSibling","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getNumInvalidMarkets_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumInvalidMarkets","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public isForkingMarketFinalized_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isForkingMarketFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getNumDesignatedReportNoShows_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumDesignatedReportNoShows","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public migrateMarketInFromNibling = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateMarketInFromNibling","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public migrateMarketInFromNibling_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateMarketInFromNibling","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public getInitialized_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public isDisputeActive_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isDisputeActive","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public createMarket = async(endTime: BN, numOutcomes: BN, numTicks: BN, feePerEthInWei: BN, denominationToken: string, designatedReporterAddress: string, topic: string, extraInfo: string, options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_numOutcomes","type":"uint8"},{"name":"_numTicks","type":"uint256"},{"name":"_feePerEthInWei","type":"uint256"},{"name":"_denominationToken","type":"address"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_topic","type":"string"},{"name":"_extraInfo","type":"string"}],"name":"createMarket","outputs":[{"name":"_newMarket","type":"address"}],"payable":true,"stateMutability":"payable","type":"function"};
        return await this.remoteCall(abi, [endTime, numOutcomes, numTicks, feePerEthInWei, denominationToken, designatedReporterAddress, topic, extraInfo], options.sender, options.gasPrice, options.attachedEth);
    }

    public createMarket_ = async(endTime: BN, numOutcomes: BN, numTicks: BN, feePerEthInWei: BN, denominationToken: string, designatedReporterAddress: string, topic: string, extraInfo: string, options?: { sender?: string, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_numOutcomes","type":"uint8"},{"name":"_numTicks","type":"uint256"},{"name":"_feePerEthInWei","type":"uint256"},{"name":"_denominationToken","type":"address"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_topic","type":"string"},{"name":"_extraInfo","type":"string"}],"name":"createMarket","outputs":[{"name":"_newMarket","type":"address"}],"payable":true,"stateMutability":"payable","type":"function"};
        const result = await this.localCall(abi, [endTime, numOutcomes, numTicks, feePerEthInWei, denominationToken, designatedReporterAddress, topic, extraInfo], options.sender, options.attachedEth);
        return <string>result[0];
    }
}

export class ReputationToken extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public name_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public approve = async(spender: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [spender, value], options.sender, options.gasPrice);
    }

    public approve_ = async(spender: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [spender, value], options.sender);
        return <boolean>result[0];
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public totalSupply_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public transferFrom = async(from: string, to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [from, to, value], options.sender, options.gasPrice);
    }

    public transferFrom_ = async(from: string, to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [from, to, value], options.sender);
        return <boolean>result[0];
    }

    public trustedReportingWindowTransfer = async(source: string, destination: string, attotokens: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedReportingWindowTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [source, destination, attotokens], options.sender, options.gasPrice);
    }

    public trustedReportingWindowTransfer_ = async(source: string, destination: string, attotokens: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedReportingWindowTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [source, destination, attotokens], options.sender);
        return <boolean>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public decimals_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getTopMigrationDestination_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTopMigrationDestination","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public ETERNAL_APPROVAL_VALUE_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ETERNAL_APPROVAL_VALUE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public migrateOutStakeToken = async(destination: string, reporter: string, attotokens: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOutStakeToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, reporter, attotokens], options.sender, options.gasPrice);
    }

    public migrateOutStakeToken_ = async(destination: string, reporter: string, attotokens: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOutStakeToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, reporter, attotokens], options.sender);
        return <boolean>result[0];
    }

    public balanceOf_ = async(owner: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [owner], options.sender);
        return <BN>result[0];
    }

    public migrateFromLegacyReputationToken = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public migrateFromLegacyReputationToken_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getUniverse_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public symbol_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public migrateIn = async(reporter: string, attotokens: BN, bonusIfInForkWindow: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"},{"name":"_bonusIfInForkWindow","type":"bool"}],"name":"migrateIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [reporter, attotokens, bonusIfInForkWindow], options.sender, options.gasPrice);
    }

    public migrateIn_ = async(reporter: string, attotokens: BN, bonusIfInForkWindow: boolean, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"},{"name":"_bonusIfInForkWindow","type":"bool"}],"name":"migrateIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [reporter, attotokens, bonusIfInForkWindow], options.sender);
        return <boolean>result[0];
    }

    public transfer = async(to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [to, value], options.sender, options.gasPrice);
    }

    public transfer_ = async(to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [to, value], options.sender);
        return <boolean>result[0];
    }

    public migrateOutDisputeBond = async(destination: string, reporter: string, attotokens: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOutDisputeBond","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, reporter, attotokens], options.sender, options.gasPrice);
    }

    public migrateOutDisputeBond_ = async(destination: string, reporter: string, attotokens: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOutDisputeBond","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, reporter, attotokens], options.sender);
        return <boolean>result[0];
    }

    public mintForDisputeBondMigration = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"mintForDisputeBondMigration","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [amount], options.sender, options.gasPrice);
    }

    public mintForDisputeBondMigration_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"mintForDisputeBondMigration","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [amount], options.sender);
        return <boolean>result[0];
    }

    public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public initialize = async(universe: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [universe], options.sender, options.gasPrice);
    }

    public initialize_ = async(universe: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [universe], options.sender);
        return <boolean>result[0];
    }

    public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public allowance_ = async(owner: string, spender: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [owner, spender], options.sender);
        return <BN>result[0];
    }

    public migrateOut = async(destination: string, reporter: string, attotokens: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOut","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, reporter, attotokens], options.sender, options.gasPrice);
    }

    public migrateOut_ = async(destination: string, reporter: string, attotokens: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOut","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, reporter, attotokens], options.sender);
        return <boolean>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public getInitialized_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public trustedStakeTokenTransfer = async(source: string, destination: string, attotokens: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedStakeTokenTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [source, destination, attotokens], options.sender, options.gasPrice);
    }

    public trustedStakeTokenTransfer_ = async(source: string, destination: string, attotokens: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedStakeTokenTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [source, destination, attotokens], options.sender);
        return <boolean>result[0];
    }

    public trustedMarketTransfer = async(source: string, destination: string, attotokens: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [source, destination, attotokens], options.sender, options.gasPrice);
    }

    public trustedMarketTransfer_ = async(source: string, destination: string, attotokens: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [source, destination, attotokens], options.sender);
        return <boolean>result[0];
    }

    public trustedParticipationTokenTransfer = async(source: string, destination: string, attotokens: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedParticipationTokenTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [source, destination, attotokens], options.sender, options.gasPrice);
    }

    public trustedParticipationTokenTransfer_ = async(source: string, destination: string, attotokens: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedParticipationTokenTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [source, destination, attotokens], options.sender);
        return <boolean>result[0];
    }

    public getBalance_ = async(address: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_address","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [address], options.sender);
        return <BN>result[0];
    }
}

export class StakeToken extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public approve = async(spender: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [spender, value], options.sender, options.gasPrice);
    }

    public approve_ = async(spender: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [spender, value], options.sender);
        return <boolean>result[0];
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public totalSupply_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getPayoutNumerator_ = async(ndex: BN, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"index","type":"uint8"}],"name":"getPayoutNumerator","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [ndex], options.sender);
        return <BN>result[0];
    }

    public transferFrom = async(from: string, to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [from, to, value], options.sender, options.gasPrice);
    }

    public transferFrom_ = async(from: string, to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [from, to, value], options.sender);
        return <boolean>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public migrateLosingTokens = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateLosingTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public migrateLosingTokens_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateLosingTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public payoutNumerators_ = async(arg0: BN, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"payoutNumerators","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [arg0], options.sender);
        return <BN>result[0];
    }

    public ETERNAL_APPROVAL_VALUE_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ETERNAL_APPROVAL_VALUE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public initialize = async(market: string, payoutNumerators: Array<BN>, invalid: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_invalid","type":"bool"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [market, payoutNumerators, invalid], options.sender, options.gasPrice);
    }

    public initialize_ = async(market: string, payoutNumerators: Array<BN>, invalid: boolean, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_invalid","type":"bool"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [market, payoutNumerators, invalid], options.sender);
        return <boolean>result[0];
    }

    public balanceOf_ = async(owner: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [owner], options.sender);
        return <BN>result[0];
    }

    public market_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"market","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getUniverse_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public trustedBuy = async(reporter: string, attotokens: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedBuy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [reporter, attotokens], options.sender, options.gasPrice);
    }

    public trustedBuy_ = async(reporter: string, attotokens: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedBuy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [reporter, attotokens], options.sender);
        return <boolean>result[0];
    }

    public redeemForkedTokens = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"redeemForkedTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public redeemForkedTokens_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"redeemForkedTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public transfer = async(to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [to, value], options.sender, options.gasPrice);
    }

    public transfer_ = async(to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [to, value], options.sender);
        return <boolean>result[0];
    }

    public getReputationToken_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public isValid_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isValid","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public withdrawInEmergency = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawInEmergency","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public withdrawInEmergency_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawInEmergency","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public buy = async(attotokens: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_attotokens","type":"uint256"}],"name":"buy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [attotokens], options.sender, options.gasPrice);
    }

    public buy_ = async(attotokens: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_attotokens","type":"uint256"}],"name":"buy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [attotokens], options.sender);
        return <boolean>result[0];
    }

    public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public allowance_ = async(owner: string, spender: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [owner, spender], options.sender);
        return <BN>result[0];
    }

    public getPayoutDistributionHash_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getPayoutDistributionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public redeemWinningTokens = async(orgoFees: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"forgoFees","type":"bool"}],"name":"redeemWinningTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [orgoFees], options.sender, options.gasPrice);
    }

    public redeemWinningTokens_ = async(orgoFees: boolean, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"forgoFees","type":"bool"}],"name":"redeemWinningTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [orgoFees], options.sender);
        return <boolean>result[0];
    }

    public redeemDisavowedTokens = async(reporter: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"}],"name":"redeemDisavowedTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [reporter], options.sender, options.gasPrice);
    }

    public redeemDisavowedTokens_ = async(reporter: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"}],"name":"redeemDisavowedTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [reporter], options.sender);
        return <boolean>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public getInitialized_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getReportingWindow_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getMarket_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarket","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getBalance_ = async(address: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_address","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [address], options.sender);
        return <BN>result[0];
    }
}

export class Universe extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public getDesignatedReportNoShowBond_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDesignatedReportNoShowBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getOrCreatePreviousReportingWindow = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCreatePreviousReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public getOrCreatePreviousReportingWindow_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCreatePreviousReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public getReportingFeeDivisor_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReportingFeeDivisor","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getRepMarketCapInAttoeth_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getRepMarketCapInAttoeth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getReportingWindowByMarketEndTime_ = async(endTime: BN, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_endTime","type":"uint256"}],"name":"getReportingWindowByMarketEndTime","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [endTime], options.sender);
        return <string>result[0];
    }

    public getMarketCreationCost_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarketCreationCost","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getReportingWindowId_ = async(timestamp: BN, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_timestamp","type":"uint256"}],"name":"getReportingWindowId","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [timestamp], options.sender);
        return <BN>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getDesignatedReportStake_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDesignatedReportStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getOrCreateReportingWindowByMarketEndTime = async(endTime: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"}],"name":"getOrCreateReportingWindowByMarketEndTime","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [endTime], options.sender, options.gasPrice);
    }

    public getOrCreateReportingWindowByMarketEndTime_ = async(endTime: BN, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"}],"name":"getOrCreateReportingWindowByMarketEndTime","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [endTime], options.sender);
        return <string>result[0];
    }

    public getOrCreateReportingWindowForForkEndTime = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCreateReportingWindowForForkEndTime","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public getOrCreateReportingWindowForForkEndTime_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCreateReportingWindowForForkEndTime","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public isContainerForDisputeBond_ = async(shadyDisputeBond: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyDisputeBond","type":"address"}],"name":"isContainerForDisputeBond","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyDisputeBond], options.sender);
        return <boolean>result[0];
    }

    public getOrCacheTargetReporterGasCosts = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheTargetReporterGasCosts","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public getOrCacheTargetReporterGasCosts_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheTargetReporterGasCosts","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public decreaseRepAvailableForExtraBondPayouts = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"decreaseRepAvailableForExtraBondPayouts","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [amount], options.sender, options.gasPrice);
    }

    public decreaseRepAvailableForExtraBondPayouts_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"decreaseRepAvailableForExtraBondPayouts","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [amount], options.sender);
        return <boolean>result[0];
    }

    public getReportingWindowForForkEndTime_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReportingWindowForForkEndTime","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public fork = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public fork_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public isContainerForReportingWindow_ = async(shadyReportingWindow: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyReportingWindow","type":"address"}],"name":"isContainerForReportingWindow","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyReportingWindow], options.sender);
        return <boolean>result[0];
    }

    public getTargetRepMarketCapInAttoeth_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTargetRepMarketCapInAttoeth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public isContainerForShareToken_ = async(shadyShareToken: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyShareToken","type":"address"}],"name":"isContainerForShareToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyShareToken], options.sender);
        return <boolean>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public getReportingPeriodDurationInSeconds_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReportingPeriodDurationInSeconds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public calculateFloatingValue_ = async(badMarkets: BN, totalMarkets: BN, targetDivisor: BN, previousValue: BN, defaultValue: BN, floor: BN, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_badMarkets","type":"uint256"},{"name":"_totalMarkets","type":"uint256"},{"name":"_targetDivisor","type":"uint256"},{"name":"_previousValue","type":"uint256"},{"name":"_defaultValue","type":"uint256"},{"name":"_floor","type":"uint256"}],"name":"calculateFloatingValue","outputs":[{"name":"_newValue","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"};
        const result = await this.localCall(abi, [badMarkets, totalMarkets, targetDivisor, previousValue, defaultValue, floor], options.sender);
        return <BN>result[0];
    }

    public getPreviousReportingWindow_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getPreviousReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getCurrentReportingWindow_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getCurrentReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getOpenInterestInAttoEth_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOpenInterestInAttoEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getOrCreateReportingWindowByTimestamp = async(timestamp: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_timestamp","type":"uint256"}],"name":"getOrCreateReportingWindowByTimestamp","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [timestamp], options.sender, options.gasPrice);
    }

    public getOrCreateReportingWindowByTimestamp_ = async(timestamp: BN, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_timestamp","type":"uint256"}],"name":"getOrCreateReportingWindowByTimestamp","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [timestamp], options.sender);
        return <string>result[0];
    }

    public getForkEndTime_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getForkEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getForkReputationGoal_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getForkReputationGoal","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getOrCreateCurrentReportingWindow = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCreateCurrentReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public getOrCreateCurrentReportingWindow_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCreateCurrentReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getValidityBond_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getValidityBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getOrCreateNextReportingWindow = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCreateNextReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public getOrCreateNextReportingWindow_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCreateNextReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getOrCacheReportingFeeDivisor = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheReportingFeeDivisor","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public getOrCacheReportingFeeDivisor_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheReportingFeeDivisor","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getReportingWindow_ = async(reportingWindowId: BN, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_reportingWindowId","type":"uint256"}],"name":"getReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [reportingWindowId], options.sender);
        return <string>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public isParentOf_ = async(shadyChild: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyChild","type":"address"}],"name":"isParentOf","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyChild], options.sender);
        return <boolean>result[0];
    }

    public isContainerForParticipationToken_ = async(shadyParticipationToken: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyParticipationToken","type":"address"}],"name":"isContainerForParticipationToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyParticipationToken], options.sender);
        return <boolean>result[0];
    }

    public isContainerForMarket_ = async(shadyMarket: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyMarket","type":"address"}],"name":"isContainerForMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyMarket], options.sender);
        return <boolean>result[0];
    }

    public isContainerForStakeToken_ = async(shadyStakeToken: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyStakeToken","type":"address"}],"name":"isContainerForStakeToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [shadyStakeToken], options.sender);
        return <boolean>result[0];
    }

    public getParentUniverse_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getParentUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getReportingWindowByTimestamp_ = async(timestamp: BN, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_timestamp","type":"uint256"}],"name":"getReportingWindowByTimestamp","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [timestamp], options.sender);
        return <string>result[0];
    }

    public getOrCacheValidityBond = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheValidityBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public getOrCacheValidityBond_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheValidityBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getRepAvailableForExtraBondPayouts_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getRepAvailableForExtraBondPayouts","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public decrementOpenInterest = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"decrementOpenInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [amount], options.sender, options.gasPrice);
    }

    public decrementOpenInterest_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"decrementOpenInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [amount], options.sender);
        return <boolean>result[0];
    }

    public getReputationToken_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getNextReportingWindow_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNextReportingWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public initialize = async(parentUniverse: string, parentPayoutDistributionHash: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentUniverse","type":"address"},{"name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [parentUniverse, parentPayoutDistributionHash], options.sender, options.gasPrice);
    }

    public initialize_ = async(parentUniverse: string, parentPayoutDistributionHash: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentUniverse","type":"address"},{"name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [parentUniverse, parentPayoutDistributionHash], options.sender);
        return <boolean>result[0];
    }

    public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getParentPayoutDistributionHash_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getParentPayoutDistributionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getOrCreateChildUniverse = async(parentPayoutDistributionHash: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"getOrCreateChildUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [parentPayoutDistributionHash], options.sender, options.gasPrice);
    }

    public getOrCreateChildUniverse_ = async(parentPayoutDistributionHash: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"getOrCreateChildUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [parentPayoutDistributionHash], options.sender);
        return <string>result[0];
    }

    public getForkingMarket_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getForkingMarket","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public incrementOpenInterest = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"incrementOpenInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [amount], options.sender, options.gasPrice);
    }

    public incrementOpenInterest_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"incrementOpenInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [amount], options.sender);
        return <boolean>result[0];
    }

    public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getTargetReporterGasCosts_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTargetReporterGasCosts","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getOrCacheDesignatedReportStake = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public getOrCacheDesignatedReportStake_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getOrCacheMarketCreationCost = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheMarketCreationCost","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public getOrCacheMarketCreationCost_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheMarketCreationCost","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public getChildUniverse_ = async(parentPayoutDistributionHash: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"getChildUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [parentPayoutDistributionHash], options.sender);
        return <string>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public getInitialized_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public increaseRepAvailableForExtraBondPayouts = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"increaseRepAvailableForExtraBondPayouts","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [amount], options.sender, options.gasPrice);
    }

    public increaseRepAvailableForExtraBondPayouts_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"increaseRepAvailableForExtraBondPayouts","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [amount], options.sender);
        return <boolean>result[0];
    }

    public getOrCacheDesignatedReportNoShowBond = async( options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportNoShowBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice);
    }

    public getOrCacheDesignatedReportNoShowBond_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportNoShowBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }
}

export class CancelOrder extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public cancelOrder = async(orderId: string, type: BN, market: string, outcome: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"}],"name":"cancelOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [orderId, type, market, outcome], options.sender, options.gasPrice);
    }

    public cancelOrder_ = async(orderId: string, type: BN, market: string, outcome: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"}],"name":"cancelOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [orderId, type, market, outcome], options.sender);
        return <boolean>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }
}

export class Cash extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public name_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public approve = async(spender: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [spender, value], options.sender, options.gasPrice);
    }

    public approve_ = async(spender: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [spender, value], options.sender);
        return <boolean>result[0];
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public totalSupply_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public withdrawEtherTo = async(to: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"withdrawEtherTo","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [to, amount], options.sender, options.gasPrice);
    }

    public withdrawEtherTo_ = async(to: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"withdrawEtherTo","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [to, amount], options.sender);
        return <boolean>result[0];
    }

    public transferFrom = async(from: string, to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [from, to, value], options.sender, options.gasPrice);
    }

    public transferFrom_ = async(from: string, to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [from, to, value], options.sender);
        return <boolean>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public decimals_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public withdrawEther = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"withdrawEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [amount], options.sender, options.gasPrice);
    }

    public withdrawEther_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"withdrawEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [amount], options.sender);
        return <boolean>result[0];
    }

    public depositEtherFor = async(to: string, options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"depositEtherFor","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"};
        return await this.remoteCall(abi, [to], options.sender, options.gasPrice, options.attachedEth);
    }

    public depositEtherFor_ = async(to: string, options?: { sender?: string, attachedEth?: BN }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"depositEtherFor","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"};
        const result = await this.localCall(abi, [to], options.sender, options.attachedEth);
        return <boolean>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public ETERNAL_APPROVAL_VALUE_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ETERNAL_APPROVAL_VALUE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public balanceOf_ = async(owner: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [owner], options.sender);
        return <BN>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public symbol_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public depositEther = async( options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"depositEther","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"};
        return await this.remoteCall(abi, [], options.sender, options.gasPrice, options.attachedEth);
    }

    public depositEther_ = async( options?: { sender?: string, attachedEth?: BN }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[],"name":"depositEther","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"};
        const result = await this.localCall(abi, [], options.sender, options.attachedEth);
        return <boolean>result[0];
    }

    public transfer = async(to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [to, value], options.sender, options.gasPrice);
    }

    public transfer_ = async(to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [to, value], options.sender);
        return <boolean>result[0];
    }

    public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public allowance_ = async(owner: string, spender: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [owner, spender], options.sender);
        return <BN>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public getBalance_ = async(address: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_address","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [address], options.sender);
        return <BN>result[0];
    }
}

export class ClaimTradingProceeds extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public divideUpWinnings = async(market: string, winningStakeToken: string, outcome: BN, numberOfShares: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_winningStakeToken","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_numberOfShares","type":"uint256"}],"name":"divideUpWinnings","outputs":[{"name":"_proceeds","type":"uint256"},{"name":"_shareHolderShare","type":"uint256"},{"name":"_creatorShare","type":"uint256"},{"name":"_reporterShare","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [market, winningStakeToken, outcome, numberOfShares], options.sender, options.gasPrice);
    }

    public divideUpWinnings_ = async(market: string, winningStakeToken: string, outcome: BN, numberOfShares: BN, options?: { sender?: string }): Promise<Array<string>> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_winningStakeToken","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_numberOfShares","type":"uint256"}],"name":"divideUpWinnings","outputs":[{"name":"_proceeds","type":"uint256"},{"name":"_shareHolderShare","type":"uint256"},{"name":"_creatorShare","type":"uint256"},{"name":"_reporterShare","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [market, winningStakeToken, outcome, numberOfShares], options.sender);
        return <Array<string>>result;
    }

    public calculateCreatorFee_ = async(market: string, amount: BN, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"calculateCreatorFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [market, amount], options.sender);
        return <BN>result[0];
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public claimTradingProceeds = async(market: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"}],"name":"claimTradingProceeds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [market], options.sender, options.gasPrice);
    }

    public claimTradingProceeds_ = async(market: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"}],"name":"claimTradingProceeds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [market], options.sender);
        return <boolean>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public calculateReportingFee = async(market: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"calculateReportingFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [market, amount], options.sender, options.gasPrice);
    }

    public calculateReportingFee_ = async(market: string, amount: BN, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"calculateReportingFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [market, amount], options.sender);
        return <BN>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public calculateProceeds_ = async(winningStakeToken: string, outcome: BN, numberOfShares: BN, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_winningStakeToken","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_numberOfShares","type":"uint256"}],"name":"calculateProceeds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [winningStakeToken, outcome, numberOfShares], options.sender);
        return <BN>result[0];
    }
}

export class CompleteSets extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public sellCompleteSets = async(sender: string, market: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_sender","type":"address"},{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"sellCompleteSets","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [sender, market, amount], options.sender, options.gasPrice);
    }

    public sellCompleteSets_ = async(sender: string, market: string, amount: BN, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_sender","type":"address"},{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"sellCompleteSets","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [sender, market, amount], options.sender);
        return <BN>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public buyCompleteSets = async(sender: string, market: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_sender","type":"address"},{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [sender, market, amount], options.sender, options.gasPrice);
    }

    public buyCompleteSets_ = async(sender: string, market: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_sender","type":"address"},{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [sender, market, amount], options.sender);
        return <boolean>result[0];
    }

    public publicBuyCompleteSets = async(market: string, amount: BN, options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"publicBuyCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"};
        return await this.remoteCall(abi, [market, amount], options.sender, options.gasPrice, options.attachedEth);
    }

    public publicBuyCompleteSets_ = async(market: string, amount: BN, options?: { sender?: string, attachedEth?: BN }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"publicBuyCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"};
        const result = await this.localCall(abi, [market, amount], options.sender, options.attachedEth);
        return <boolean>result[0];
    }

    public publicSellCompleteSets = async(market: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"publicSellCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [market, amount], options.sender, options.gasPrice);
    }

    public publicSellCompleteSets_ = async(market: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"publicSellCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [market, amount], options.sender);
        return <boolean>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }
}

export class CreateOrder extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public publicCreateOrder = async(type: BN, attoshares: BN, displayPrice: BN, market: string, outcome: BN, betterOrderId: string, worseOrderId: string, tradeGroupId: BN, options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_attoshares","type":"uint256"},{"name":"_displayPrice","type":"uint256"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"uint256"}],"name":"publicCreateOrder","outputs":[{"name":"","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"};
        return await this.remoteCall(abi, [type, attoshares, displayPrice, market, outcome, betterOrderId, worseOrderId, tradeGroupId], options.sender, options.gasPrice, options.attachedEth);
    }

    public publicCreateOrder_ = async(type: BN, attoshares: BN, displayPrice: BN, market: string, outcome: BN, betterOrderId: string, worseOrderId: string, tradeGroupId: BN, options?: { sender?: string, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_attoshares","type":"uint256"},{"name":"_displayPrice","type":"uint256"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"uint256"}],"name":"publicCreateOrder","outputs":[{"name":"","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"};
        const result = await this.localCall(abi, [type, attoshares, displayPrice, market, outcome, betterOrderId, worseOrderId, tradeGroupId], options.sender, options.attachedEth);
        return <string>result[0];
    }

    public createOrder = async(creator: string, type: BN, attoshares: BN, displayPrice: BN, market: string, outcome: BN, betterOrderId: string, worseOrderId: string, tradeGroupId: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_creator","type":"address"},{"name":"_type","type":"uint8"},{"name":"_attoshares","type":"uint256"},{"name":"_displayPrice","type":"uint256"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"uint256"}],"name":"createOrder","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [creator, type, attoshares, displayPrice, market, outcome, betterOrderId, worseOrderId, tradeGroupId], options.sender, options.gasPrice);
    }

    public createOrder_ = async(creator: string, type: BN, attoshares: BN, displayPrice: BN, market: string, outcome: BN, betterOrderId: string, worseOrderId: string, tradeGroupId: BN, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_creator","type":"address"},{"name":"_type","type":"uint8"},{"name":"_attoshares","type":"uint256"},{"name":"_displayPrice","type":"uint256"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"uint256"}],"name":"createOrder","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [creator, type, attoshares, displayPrice, market, outcome, betterOrderId, worseOrderId, tradeGroupId], options.sender);
        return <string>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }
}

export class FillOrder extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public fillOrder = async(filler: string, orderId: string, amountFillerWants: BN, tradeGroupId: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_filler","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_amountFillerWants","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"fillOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [filler, orderId, amountFillerWants, tradeGroupId], options.sender, options.gasPrice);
    }

    public fillOrder_ = async(filler: string, orderId: string, amountFillerWants: BN, tradeGroupId: BN, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_filler","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_amountFillerWants","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"fillOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [filler, orderId, amountFillerWants, tradeGroupId], options.sender);
        return <BN>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public publicFillOrder = async(orderId: string, amountFillerWants: BN, tradeGroupId: BN, options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_amountFillerWants","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"publicFillOrder","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"};
        return await this.remoteCall(abi, [orderId, amountFillerWants, tradeGroupId], options.sender, options.gasPrice, options.attachedEth);
    }

    public publicFillOrder_ = async(orderId: string, amountFillerWants: BN, tradeGroupId: BN, options?: { sender?: string, attachedEth?: BN }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_amountFillerWants","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"publicFillOrder","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"};
        const result = await this.localCall(abi, [orderId, amountFillerWants, tradeGroupId], options.sender, options.attachedEth);
        return <BN>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }
}

export class Orders extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public getAmount_ = async(orderId: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [orderId], options.sender);
        return <BN>result[0];
    }

    public assertIsNotBetterPrice_ = async(type: BN, price: BN, betterOrderId: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"}],"name":"assertIsNotBetterPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [type, price, betterOrderId], options.sender);
        return <boolean>result[0];
    }

    public getOrderId_ = async(type: BN, market: string, amount: BN, price: BN, sender: string, blockNumber: BN, outcome: BN, moneyEscrowed: BN, sharesEscrowed: BN, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_sender","type":"address"},{"name":"_blockNumber","type":"uint256"},{"name":"_outcome","type":"uint8"},{"name":"_moneyEscrowed","type":"uint256"},{"name":"_sharesEscrowed","type":"uint256"}],"name":"getOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [type, market, amount, price, sender, blockNumber, outcome, moneyEscrowed, sharesEscrowed], options.sender);
        return <string>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getPrice_ = async(orderId: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [orderId], options.sender);
        return <BN>result[0];
    }

    public assertIsNotWorsePrice = async(type: BN, price: BN, worseOrderId: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_worseOrderId","type":"bytes32"}],"name":"assertIsNotWorsePrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [type, price, worseOrderId], options.sender, options.gasPrice);
    }

    public assertIsNotWorsePrice_ = async(type: BN, price: BN, worseOrderId: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_worseOrderId","type":"bytes32"}],"name":"assertIsNotWorsePrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [type, price, worseOrderId], options.sender);
        return <boolean>result[0];
    }

    public getOrderMoneyEscrowed_ = async(orderId: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderMoneyEscrowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [orderId], options.sender);
        return <BN>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public getBestOrderId_ = async(type: BN, market: string, outcome: BN, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"}],"name":"getBestOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [type, market, outcome], options.sender);
        return <string>result[0];
    }

    public isBetterPrice_ = async(type: BN, price: BN, orderId: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_orderId","type":"bytes32"}],"name":"isBetterPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [type, price, orderId], options.sender);
        return <boolean>result[0];
    }

    public getOutcome_ = async(orderId: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOutcome","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [orderId], options.sender);
        return <BN>result[0];
    }

    public fillOrder = async(orderId: string, sharesFilled: BN, tokensFilled: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_sharesFilled","type":"uint256"},{"name":"_tokensFilled","type":"uint256"}],"name":"fillOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [orderId, sharesFilled, tokensFilled], options.sender, options.gasPrice);
    }

    public fillOrder_ = async(orderId: string, sharesFilled: BN, tokensFilled: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_sharesFilled","type":"uint256"},{"name":"_tokensFilled","type":"uint256"}],"name":"fillOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [orderId, sharesFilled, tokensFilled], options.sender);
        return <boolean>result[0];
    }

    public getWorseOrderId_ = async(orderId: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getWorseOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [orderId], options.sender);
        return <string>result[0];
    }

    public getLastOutcomePrice_ = async(market: string, outcome: BN, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"}],"name":"getLastOutcomePrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [market, outcome], options.sender);
        return <BN>result[0];
    }

    public getVolume_ = async(market: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"}],"name":"getVolume","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [market], options.sender);
        return <BN>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public getBetterOrderId_ = async(orderId: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getBetterOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [orderId], options.sender);
        return <string>result[0];
    }

    public getWorstOrderId_ = async(type: BN, market: string, outcome: BN, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"}],"name":"getWorstOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [type, market, outcome], options.sender);
        return <string>result[0];
    }

    public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getMarket_ = async(orderId: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getMarket","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [orderId], options.sender);
        return <string>result[0];
    }

    public getOrderType_ = async(orderId: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderType","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [orderId], options.sender);
        return <BN>result[0];
    }

    public setPrice = async(market: string, outcome: BN, price: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_price","type":"uint256"}],"name":"setPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [market, outcome, price], options.sender, options.gasPrice);
    }

    public setPrice_ = async(market: string, outcome: BN, price: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_price","type":"uint256"}],"name":"setPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [market, outcome, price], options.sender);
        return <boolean>result[0];
    }

    public isWorsePrice_ = async(type: BN, price: BN, orderId: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_orderId","type":"bytes32"}],"name":"isWorsePrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [type, price, orderId], options.sender);
        return <boolean>result[0];
    }

    public getOrderCreator_ = async(orderId: string, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderCreator","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [orderId], options.sender);
        return <string>result[0];
    }

    public getOrderSharesEscrowed_ = async(orderId: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderSharesEscrowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [orderId], options.sender);
        return <BN>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public removeOrder = async(orderId: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"removeOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [orderId], options.sender, options.gasPrice);
    }

    public removeOrder_ = async(orderId: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"removeOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [orderId], options.sender);
        return <boolean>result[0];
    }

    public saveOrder = async(type: BN, market: string, amount: BN, price: BN, sender: string, outcome: BN, moneyEscrowed: BN, sharesEscrowed: BN, betterOrderId: string, worseOrderId: string, tradeGroupId: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_sender","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_moneyEscrowed","type":"uint256"},{"name":"_sharesEscrowed","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"uint256"}],"name":"saveOrder","outputs":[{"name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [type, market, amount, price, sender, outcome, moneyEscrowed, sharesEscrowed, betterOrderId, worseOrderId, tradeGroupId], options.sender, options.gasPrice);
    }

    public saveOrder_ = async(type: BN, market: string, amount: BN, price: BN, sender: string, outcome: BN, moneyEscrowed: BN, sharesEscrowed: BN, betterOrderId: string, worseOrderId: string, tradeGroupId: BN, options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_sender","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_moneyEscrowed","type":"uint256"},{"name":"_sharesEscrowed","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"uint256"}],"name":"saveOrder","outputs":[{"name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [type, market, amount, price, sender, outcome, moneyEscrowed, sharesEscrowed, betterOrderId, worseOrderId, tradeGroupId], options.sender);
        return <string>result[0];
    }
}

export class OrdersFetcher extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public descendOrderList_ = async(type: BN, price: BN, highestOrderId: string, options?: { sender?: string }): Promise<Array<string>> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_highestOrderId","type":"bytes32"}],"name":"descendOrderList","outputs":[{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [type, price, highestOrderId], options.sender);
        return <Array<string>>result;
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public findBoundingOrders = async(type: BN, price: BN, bestOrderId: string, worstOrderId: string, betterOrderId: string, worseOrderId: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_bestOrderId","type":"bytes32"},{"name":"_worstOrderId","type":"bytes32"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"name":"findBoundingOrders","outputs":[{"name":"","type":"bytes32"},{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [type, price, bestOrderId, worstOrderId, betterOrderId, worseOrderId], options.sender, options.gasPrice);
    }

    public findBoundingOrders_ = async(type: BN, price: BN, bestOrderId: string, worstOrderId: string, betterOrderId: string, worseOrderId: string, options?: { sender?: string }): Promise<Array<string>> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_bestOrderId","type":"bytes32"},{"name":"_worstOrderId","type":"bytes32"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"name":"findBoundingOrders","outputs":[{"name":"","type":"bytes32"},{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [type, price, bestOrderId, worstOrderId, betterOrderId, worseOrderId], options.sender);
        return <Array<string>>result;
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public ascendOrderList_ = async(type: BN, price: BN, lowestOrderId: string, options?: { sender?: string }): Promise<Array<string>> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_lowestOrderId","type":"bytes32"}],"name":"ascendOrderList","outputs":[{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [type, price, lowestOrderId], options.sender);
        return <Array<string>>result;
    }
}

export class ShareToken extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public name_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public approve = async(spender: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [spender, value], options.sender, options.gasPrice);
    }

    public approve_ = async(spender: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [spender, value], options.sender);
        return <boolean>result[0];
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public createShares = async(owner: string, fxpValue: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_owner","type":"address"},{"name":"_fxpValue","type":"uint256"}],"name":"createShares","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [owner, fxpValue], options.sender, options.gasPrice);
    }

    public createShares_ = async(owner: string, fxpValue: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_owner","type":"address"},{"name":"_fxpValue","type":"uint256"}],"name":"createShares","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [owner, fxpValue], options.sender);
        return <boolean>result[0];
    }

    public totalSupply_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public transferFrom = async(from: string, to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [from, to, value], options.sender, options.gasPrice);
    }

    public transferFrom_ = async(from: string, to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [from, to, value], options.sender);
        return <boolean>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public decimals_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public ETERNAL_APPROVAL_VALUE_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ETERNAL_APPROVAL_VALUE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public balanceOf_ = async(owner: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [owner], options.sender);
        return <BN>result[0];
    }

    public getOutcome_ = async( options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOutcome","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <BN>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public initialize = async(market: string, outcome: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [market, outcome], options.sender, options.gasPrice);
    }

    public initialize_ = async(market: string, outcome: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [market, outcome], options.sender);
        return <boolean>result[0];
    }

    public symbol_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public transfer = async(to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [to, value], options.sender, options.gasPrice);
    }

    public transfer_ = async(to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [to, value], options.sender);
        return <boolean>result[0];
    }

    public isShareToken_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isShareToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public destroyShares = async(owner: string, fxpValue: BN, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_owner","type":"address"},{"name":"_fxpValue","type":"uint256"}],"name":"destroyShares","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [owner, fxpValue], options.sender, options.gasPrice);
    }

    public destroyShares_ = async(owner: string, fxpValue: BN, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_owner","type":"address"},{"name":"_fxpValue","type":"uint256"}],"name":"destroyShares","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [owner, fxpValue], options.sender);
        return <boolean>result[0];
    }

    public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public allowance_ = async(owner: string, spender: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [owner, spender], options.sender);
        return <BN>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }

    public getInitialized_ = async( options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <boolean>result[0];
    }

    public getMarket_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarket","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public getBalance_ = async(address: string, options?: { sender?: string }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_address","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [address], options.sender);
        return <BN>result[0];
    }
}

export class Trade extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public publicTakeBestOrder = async(direction: BN, market: string, outcome: BN, fxpAmount: BN, price: BN, tradeGroupId: BN, options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_direction","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_fxpAmount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"publicTakeBestOrder","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"};
        return await this.remoteCall(abi, [direction, market, outcome, fxpAmount, price, tradeGroupId], options.sender, options.gasPrice, options.attachedEth);
    }

    public publicTakeBestOrder_ = async(direction: BN, market: string, outcome: BN, fxpAmount: BN, price: BN, tradeGroupId: BN, options?: { sender?: string, attachedEth?: BN }): Promise<BN> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_direction","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_fxpAmount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"publicTakeBestOrder","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"};
        const result = await this.localCall(abi, [direction, market, outcome, fxpAmount, price, tradeGroupId], options.sender, options.attachedEth);
        return <BN>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public publicBuy = async(market: string, outcome: BN, fxpAmount: BN, price: BN, tradeGroupId: BN, options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_fxpAmount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"publicBuy","outputs":[{"name":"","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"};
        return await this.remoteCall(abi, [market, outcome, fxpAmount, price, tradeGroupId], options.sender, options.gasPrice, options.attachedEth);
    }

    public publicBuy_ = async(market: string, outcome: BN, fxpAmount: BN, price: BN, tradeGroupId: BN, options?: { sender?: string, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_fxpAmount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"publicBuy","outputs":[{"name":"","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"};
        const result = await this.localCall(abi, [market, outcome, fxpAmount, price, tradeGroupId], options.sender, options.attachedEth);
        return <string>result[0];
    }

    public publicTrade = async(direction: BN, market: string, outcome: BN, fxpAmount: BN, price: BN, tradeGroupId: BN, options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_direction","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_fxpAmount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"publicTrade","outputs":[{"name":"","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"};
        return await this.remoteCall(abi, [direction, market, outcome, fxpAmount, price, tradeGroupId], options.sender, options.gasPrice, options.attachedEth);
    }

    public publicTrade_ = async(direction: BN, market: string, outcome: BN, fxpAmount: BN, price: BN, tradeGroupId: BN, options?: { sender?: string, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_direction","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_fxpAmount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"publicTrade","outputs":[{"name":"","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"};
        const result = await this.localCall(abi, [direction, market, outcome, fxpAmount, price, tradeGroupId], options.sender, options.attachedEth);
        return <string>result[0];
    }

    public publicSell = async(market: string, outcome: BN, fxpAmount: BN, price: BN, tradeGroupId: BN, options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_fxpAmount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"publicSell","outputs":[{"name":"","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"};
        return await this.remoteCall(abi, [market, outcome, fxpAmount, price, tradeGroupId], options.sender, options.gasPrice, options.attachedEth);
    }

    public publicSell_ = async(market: string, outcome: BN, fxpAmount: BN, price: BN, tradeGroupId: BN, options?: { sender?: string, attachedEth?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_fxpAmount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_tradeGroupId","type":"uint256"}],"name":"publicSell","outputs":[{"name":"","type":"bytes32"}],"payable":true,"stateMutability":"payable","type":"function"};
        const result = await this.localCall(abi, [market, outcome, fxpAmount, price, tradeGroupId], options.sender, options.attachedEth);
        return <string>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }
}

export class TradingEscapeHatch extends Controlled {
    public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
        super(connector, accountManager, address, defaultGasPrice);
    }

    public suicideFunds = async(target: string, tokens: Array<string>, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [target, tokens], options.sender, options.gasPrice);
    }

    public suicideFunds_ = async(target: string, tokens: Array<string>, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_tokens","type":"address[]"}],"name":"suicideFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [target, tokens], options.sender);
        return <boolean>result[0];
    }

    public getController_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public extractEther = async(destination: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination], options.sender, options.gasPrice);
    }

    public extractEther_ = async(destination: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"}],"name":"extractEther","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination], options.sender);
        return <boolean>result[0];
    }

    public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [controller], options.sender, options.gasPrice);
    }

    public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_controller","type":"address"}],"name":"setController","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [controller], options.sender);
        return <boolean>result[0];
    }

    public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
        const result = await this.localCall(abi, [], options.sender);
        return <string>result[0];
    }

    public claimSharesInUpdate = async(market: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"}],"name":"claimSharesInUpdate","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [market], options.sender, options.gasPrice);
    }

    public claimSharesInUpdate_ = async(market: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"}],"name":"claimSharesInUpdate","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [market], options.sender);
        return <boolean>result[0];
    }

    public extractTokens = async(destination: string, token: string, options?: { sender?: string, gasPrice?: BN }): Promise<string> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        return await this.remoteCall(abi, [destination, token], options.sender, options.gasPrice);
    }

    public extractTokens_ = async(destination: string, token: string, options?: { sender?: string }): Promise<boolean> => {
        options = options || {};
        const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_token","type":"address"}],"name":"extractTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
        const result = await this.localCall(abi, [destination, token], options.sender);
        return <boolean>result[0];
    }
}

    export function ContractFactory(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN): Controlled {
        return new Controlled(connector, accountManager, address, defaultGasPrice);
    }
    